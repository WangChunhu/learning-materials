1.chmod 赋予文件权限
    cd到文件夹
    chmod u+x KaKs_Calculator 赋予文件可执行权限
    # u:用户自己 ；g:群组 ；O: 其他用户 ；a：所有用户
    # +：增加权限 ; -：减少权限 ; =：直接给个权限
    chmod 777 test.txt

2.jobs 查看后台任务
    jobs
    jobs -l #显示进程号PID

3.gzip 压缩,一次一个文件  #gzip 1.txt,生成1.txt.gz
    -c 保持源文件不变，默认删掉  #gzip -cdv 1.txt.gz > 1.txt,默认输出到屏幕，所以重定向一个文件
                             #gzip -cv 1.txt > 1-1.txt.gz
    -d 解压缩 #gzip -d 1.txt.gz,生成1.txt
    -v 显示信息

   unzip -l # 查看压缩包中的文件
   unzip test5.zip 解压压缩文件test5.zip到当前目录
      unzip -q -d ./SIngularity_Container_repair  SIngularity_Container.zip # -q 不显示执行过程； -d 指定解压路径

4.bzip2 压缩,一次一个文件 #用法同gzip,-c变为-k ,压缩效果>gzip

5.tar 打包多个文件，.tar表示没有压缩，只打包 
    tar -czvf 1-2.tar.gz 1.txt 2.txt #打包压缩
    tar -tzvf 1.tar.gz #查看打包文件内文件名
    tar -zxvf 1.tar.gz
    -c 创建新的打包文件
    -x 对打包文件进行解压
    -t 查看打包文件内文件名
    -z 调用gzip，.tar.gz
    -j 调用bzip，.tar.bz2
    -f 指定文件对像，用空格隔开，放在命令最后，若有-c，则为新创建的文件的路径名
    -p 保留文件的各种属性，用于备份
    -P 保留绝对路径，还原会覆盖源文件
    -v 显示信息
    -- exclude 指定不打包的文件

6.vi 
（1）光标控制
    u 撤销上一步动作
    ctrl+r 前进或重复上一步动作
    0 移动到行头
    $ 移动到行尾
    5+或enter/- 向下或上移动5行
    5<空格键> 向右移动5个字符
    +/- 移动到上一或下一非空行,不起作用？
    gg 移动到文件首行
    5G 移动至文件第5行
    G 移动到文件尾行
    H 移动到屏幕首行首字符
    M 移动到屏幕中行首字符
    G 移动到屏幕尾行首字符
    ctrl + f/b 下/上翻一页
    ctrl + d/u 下/上翻半页
    yy 复制行
    nyy 复制n行
    y1G 复制光标以上到首行的内容
    yG 复制光标以下到尾行的内容
    y0 复制光标到所在行到开始的内容
    y$ 复制光标到所在行到末尾的内容
    yw 复制光标所在位置的一个字符
    nyy 复制从光标所在行数的n行
    p 粘贴
    P 粘贴到光标上一行
    x 删除光标后面的字符，反X
    nx 删除光标后面的n个字符，反X
    dd 删除所在行 #dG，d1G,d0,d$
    ndd 删除光标所在行的n行
    J 将光标所在行与下一行合并，可以和ctrl+r合并
    搜索文本 /name 由上而下搜索name
            ？name 由下而上搜索name
            n 下一个
            N 上一个
    
（2）底行命令模式
    n1,n2s/word1/word2/g #将n1行到n2行的word1字符替换为word2,/g，全局;/gc要求用户确认
    set nu 显示行号
    set nuno
    w 保存
    w! 文件为只读时，强制写入
    wq/x 保存并退出
    wq! 强制保存并退出
    q 退出
    q! 不保存退出
    ZZ 没有修改则不保存，修改了则保存退出
    w filename 另存
    n1,n2 w filename n1-n1之间另存
    r 读入另一个文件并追加到当前文件光标下面一行
    ! command 暂停vi操作，执行其他命令

7.ln 软链接
    ln -s 1.txt 1.txt.s #不加s为硬链接
          源文件  链接     

8.alias 重命名命令
    alias ll='ls -al' #命令存放在 ~/.bashrc 文件中。打开~/.bashrc文件，输入要设置的alias命令，保存，然后运行source ~/.bashrc。
    type ll #查看命令是否在.bashrc内 #ll 是“ls -al”的别名 
9.du du -sh #查看文件夹大小 
du -sh * | sort -n #查看当前目录下所有文件的大小并按数字大小排序 

10.sudo fdisk -l |grep Disk  #查看硬盘 
cat /proc/meminfo | grep MemTotal #查看总内存 
cat /proc/cpuinfo  #查看cpu 
cat /proc/cpuinfo | grep "physical id" | uniq | wc -l 

11.wc linux命令.txt #不写参数则顺序显示行数，字数和字节数 -l 行数 -w 字数 -c 字节数 

12.cut 按指定条件从文件的每一行提取字符，字段
    -d 按分隔符 #cut -d , -f 1 4.txt
    -f 第几段
    -c 按字符 #cut -C 2-4 1.txt

13.grep #查找指定字符
    grep df 4.txt #显示真行信息
    grep df 4.txt | wc -l #多少行
    -r 递归
    -v 反向
    -i 忽略大小写

14.history
    history n #显示n条历史命令
    !2 执行第二个历史命令
    !! 执行上个命令

15.通配符（R语言通用）
    * 任意字符 #ll 1-*.txt.bz2
    ？ 任意单个字符 #ll 1-?.txt.bz2
    [] 任意指定范围内的任意单个字符 #ll 1-2.t[a]* #与？的不同点在于是具体的字符
    [^] 任意指定范围外的任意单个字符 #可以写在下面括号里，eg. [^:space:] 表示非...
    [:space:] 空白字符/空格？ #使用[[:space:]]，下同
    [:punct:] 标点符号
    [:lower:] 小写字母
    [:upper:] 大写字母
    [:alpha:] 大小写字母
    [:digit:] 数字
    [:alnum:] 字母和数字
    [a-k] a至k，识别单个
    [a-k]+ a至k

16.expr
    sum=`expr 4 + 5` #运算符前后加空格,仅限整数
    echo $sum
    a="wangchunhu"
    expr length $a
    expr index $a chu #获取chu的位置信息
    expr substr $a 2 3 #从第2个字符开始数3个

17.shell编程
    #单引号里面所有符号均失效，变量失效，不能有单引号（转义符会失效）
    （1）#注释信息
    （2）定义变量
        a.myname="wangchunhu" #等号前后不能有空格
        b.time=`date +%H:%M:%S` #sleep 休眠，单位秒
          echo "现在时间是：$time"
        c.for file in `ls ./` #``反引号，表示获取,将一个命令的执行结果赋值给变量,通过$()也可以,echo $((4+5)) # $(())或$[]表示求值
          do
              echo $file
          done
    （3）使用变量前面加$符号
        echo $myname
        echo ${myname} #{}定位变量，后面可以接其他字符，eg. echo ${myname}bcd，前面要写在$前
    （4）重定义变量，直接重新赋值即可
    （5）字符串拼接
        a="wang"
        b="chunhu"
        c=${a}sd$b
        echo c
    （6）!转义的话后面加个空格即可
        a="wangchunhu"
        echo "\"$a\" is good! "
    （7）获取字符串长度
        echo ${#a} #输出10
    （8）提取字符串 #从0开始
        echo ${a:0:3}
    （9）查找字符串 #可直接运行expr index $a chu
        echo `expr index $a chu` #输出5
    （10）删除部分字符串
        echo $a{/wang/} #输出chunhu，必须带括号,注意转义问题
    （11）for循环
        cd /media/huhu/学习/生信/linux命令/练习
        for filename in `ls ./*.txt`
        do
            echo $filename filename

            file=$filename
            name=$filename
            #目录名
            file=${file/\/*/} #去掉.后面的字符
            echo $file file
            
            #w文件名
            name=${name/.\//}
            echo $name name
            
            cp $file/$name ../练习2/$file$name
            done

            for fruits in apple banana orange #不能带引号
            do 
                echo "I like ${fruits}-pie."
            done

            for num in {1..100};do echo $num;done
            for((i=0;i<=100;i++)); do echo "I have isolated for $i days."; done
            for((i=1;i<=100;i++));do sum=`expr $sum + $i`;echo $sum;done
            sum=0;for i in `seq 1 100`;do sum=`expr $sum + $i`;done;echo $sum
            sum=0;for i in `seq 1 100`;do sum=$[$sum+$i];done;echo $sum
    （12）脚本
        sh *.sh #sh -> /bin/sh
        echo "hello world!"
        sum=`expr $1 + $2` # $1表示第一个参数，$0表示命令本身，$*,显示所有参数，$#表示参数的个数，$@暂时没发现与$*的区别
        echo $sum
        echo $? #执行上一个命令的返回值，成功则返回0,不成功则返回其他数字，依错误情况而定
        echo $$ #返回当前进程的PID
        echo $! #返回后台运行的最后一个进程的PID
    （13）while循环
        i=1
        sum=0
        while(($i<=100))
        do
            sum=`expr $sum + $i` 
            echo $sum 
            i=`expr $i + 1`
        done
        
        while(($i<=100));do sum=`expr $sum + $i`;echo $sum;i=`expr $i + 1`;done
    （14）分支
        if 条件1;then
            执行命令
        elif 条件2;then
            执行命令
        else
            执行命令
        fi
    （15）seq 1 100   

    （16）paste #合并文件      
        paste 1.txt 2.txt > 6.txt #cbind
        cat 1.txt 2.txt > 6.txt #rbind
        paste -s 1.txt 2.txt > 7.txt #先t再rbind
        paste -d -"  1.txt 2.txt > 7.txt #rbind

18.awk #前后用的单引号且awk与程序之间加个空格,还要用BEGIN，输出字符不能用echo，用print，#样式扫描和处理编程语言，逐行扫描 （csv用,分割文件 ）
     # 环境变量 $0, $n, FS, OFS, RS, OFS, NF, NR, FILENAME, IGNORECASE=1(忽略大小写)
    复杂awk命令形式
    awk 'BEGIN {action1; action2; action3;….. }
    /word1/ {action1; action2; action3;….. }
    /word2/ {action1; action2; action3;….. }
    ......
    /wordx/ {action1; action2; action3;….. }
    END {action1; action2; action3;….. }' filename1 filename2 ……..

    （1）awk 'BEGIN{print "王春虎的第一个awk程序！"}
        {number++;print$0}
        END{print "student num is ",number}' /etc/passwd
    （2）内置函数
        #toupper
            awk 'BEGIN{test="i like awk!";print toupper(test)}' 
            awk 'BEGIN{print toupper("i like awk")}' 
        #tolower
        #length
            awk 'BEGIN{print length("i like awk")}'
        #rand 产生一个0-1之间的随机数
            awk 'BEGIN{print rand()}'
        #int 截取整数部分
            awk 'BEGIN{print int(2.01)}'
        #substr 
            awk 'BEGIN{print substr("wangchuhu",2,3)}'
        #index 搜索字符串中第一个目标出现的位置
            awk 'BEGIN{print index("wangchunhu","chu")}'
            awk 'BEGIN{print index("wangchunhu","chu")?"Yes":"No"}'
        #match 同index
            awk 'BEGIN{print match("wangchunhu","chu")}'
            awk 'BEGIN{print match("wangchunhu","chu")?"Yes":"No"}'
        #split 按指定字符拆分字符串
            split("wang chun hu",a," ")，返回3，并赋值给一个数组
            awk 'BEGIN{print split("wang chun hu",a," ");print length(a);for(i in a){print i,a[i]}}'
            awk 'BEGIN{split("a b c d e f g h",b," ");for(i in b){print i,b[i]}}'
        #sub 字符串替换 gsub
            sub(/pattern/, “replaced”)
            awk 'BEGIN{a="wang chun hu";sub(/wa/,"9",a);print toupper(a)}'
        # 随机数
            awk 'BEGIN {srand();print rand()*1000000}'
        # 拼接字符串 (), 不使用括号也行, 使用+会强制把数字字符转换为数字, 其它转换为0
            awk '$2 ~ /(Shiqu)/{a=($1"_"$2); print a}' site_config.correct.txt
        (3)printf 格式化输出
        - 左对齐 %-8d
        %c 打印单个ASCII字符
         awk 'BEGIN{a="i like prgm";split(a,b,"");for(i in b){printf(i "yeah! %c\n",b[i])}}' #不加\n的话会打印在下一个 huhu@huhu-PC:~$ 前面
        %s 打印字符串
            awk 'BEGIN{a="i like prgm";printf("Year! %s\n",a)}' 
        %nd 打印一个十进制数，只输出整数,总共占n个字符,前面n-1个空格,%.n的话为n-1个0
            awk 'BEGIN{a="1.5 2 3 4 5 6 7 8 9 10";split(a,b," ");for(i in b){printf("Year! i have liked prgm %d days!\n",b[i])}}'   
        %ld 打印十进制长整数（短整型范围+-32767）
            awk 'BEGIN{a="10000000 2 3 4 5 6 7 8 9 10";split(a,b," ");for(i in b){printf("Year! i have liked prgm %1d days!\n",b[i])}}'
        %nf 浮点数，同%nd,%.n的话为保留n为小数
         awk 'BEGIN{test1=-100.233; printf("Yeah! %f\n",test1)}'
        %e 科学技术法，
            awk 'BEGIN{test1=100233; printf("Yeah! %e\n",test1)}'
            awk 'BEGIN{t=10001; printf("值为:%.3e\n", t)}' # %.n的话为保留n为小数
        (4)自定义函数 #vi 1.awk;awk -f 1.awk
            awk 'function echoHUHU(num){print num} BEGIN{echoHUHU(200)}'
            awk 'function min(num1, num2){if(num1<num2){return num1}else{return num2}} BEGIN{re=min(200, 300); print re}'
	  echo "101 11" | awk 'function min(num1, num2){if(num1<num2){return num1}else{return num2}} {re=min($1, $2); print re}'
        (5) 输出重定向, 需用到getline函数
               awk ‘BEGIN{“date” | getline d; split(d,mon); print mon[2]}’ test。执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给d，split函数把变量d转 化成数组mon，然后打印数组mon的第二个元素。
               awk ‘BEGIN{while( “ls” | getline) print}’
               awk ‘BEGIN{while( “ls” | getline d) print d}’
        (4)运算符
            !=,++，--，+=，-=，||(or,&&(and),~(匹配,不写的话默认$0),!~(不匹配)
            awk '/qt(sga)|qtlwh/{print $0}' /etc/passwd
            awk '$1~/qt(sga)||qtlwh/{print $0}' /etc/passwd
        (5)正则表达式
            $ 行尾 awk '!/q$/{print $0}' /etc/passwd
            ^ 行首
            \ 转义
            * 0个或多个字符 qts* 包括不包括s都行
            + 1个或多个前一字符 qts* 包括至少1个s
            ? 0个或1个字符 qts* 只包括0个或1个s
            . 任意单个字符 qta,qtb,qtc
            [] 括号内任意一个字符 qt[abcd] 反之 [^]
            () 必须包括括号内的字符串 qt(sad)
            \Y       匹配一个单词开头或者末尾的空字符串。
            \B     匹配单词内的空字符串。
            \<    匹配一个单词的开头的空字符串，锚定开始。
            \>    匹配一个单词的末尾的空字符串，锚定末尾。
            \w   匹配一个字母数字组成的单词。
            \W   匹配一个非字母数字组成的单词。
            \‘    匹配字符串开头的一个空字符串。
            \’    匹配字符串末尾的一个空字符串。
            awk -F ":" '$1~/qt(sga)|qtlwh/{print $0}' /etc/passwd  #-F 指定分隔符
        (6)NR 打印的行数
           NF 字段数
        (7)判断
            if(条件成立)
                语句1
            else if()
                语句2
                else ()
                    语句3
        (8)循环 break(退出循环)，continue（跳过本次循环），exit（推出当前执行的脚本）
            awk 'BEGIN { for (j = 1; j <= 10; ++j) print j }'
            awk 'BEGIN { i=1;while (i <= 10){ print i; ++i} }'
            BEGIN {
                total = 0; 
                for (j = 0; j < 100; ++j) { 
                total += j;
                if (total > 60) break; 
                else print "Total =", total;
                }}
         
19.openssl rand -base64 2 #产生随机数
     awk 'BEGIN{srand(); print rand()}'

20.\ 在一行命令尾表示命令还没写完

21.sed  ///可用替换为###
    echo -e "${runfile}">>$cul/run.list # 替换变量
    sed -i '10s/old/new/' file.txt # 按行修改
    (1)-n 取消默认显示全部源文件
    (2)-i 直接修改原文件
        sed -i 's/huhu/HUHU/g' /etc/passwd 
    (3)-e 多编辑模式
        sed -e '1i I am the first one' -e '$i I am the last one' test.sh
        # =（显示行号）
            sed -n -e '1,5p' -e '=' /etc/passwd
            grep 'root' /etc/passwd | sed -e '1,5d' -e '=' -e 's/huhu/huhu is great/g'
            #指定第几个替换
                grep 'qt' /etc/passwd | sed -e '3,5d' -e 's/qtsga/qtsga is great/2’ #只替换找到的第二个
    (4)-f 直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作
    (5)动作：不用-i的话不会删除原文件,处理的是缓存文件
        s 替换，例如 1,10s/apple/orange/g
            sed -n 's/huhu/huhu-root/gp' /etc/passwd #末尾加gp，全局替换并打印
            sed 's/huhu/HUHU/w test1.sh'test.sh  #对文件操作完成后写入test.sh,并输出到一个新文件
        c 取代，c后面的内容取代指定行之间的内容,区块替换
        d 删除
            sed '1,3d' /etc/passwd
        p 通常与-n联用，打印指定的行或发生改变的行
            sed -n '3p' /etc/passwd #加-n，只显示第3行,$p,最后一行
            sed -n '3,10p' /etc/passwd #只显示3-10行
            sed -n '/\/root/,/irc/p' /etc/passwd #从找到/root开始到找到irc为止
            sed -n '3,/irc/p' /etc/passwd #从第3行开始到找到irc为止
        i 在所在行的上一行插入 
            grep 'huhu' /etc/passwd | sed '1,$i good student,He always work hard'
        a 在所在行的下一行插入
        r 读入另一个文件，不会修改原文件
            sed '/huhu/r test.sh' /etc/passwd 
		sed '10r /etc/fstab' test
        w 写文件
            sed '/huhu/w test1.sh'test.sh  #使用 file 操作符的时候要小心，当提供了文件名但是文件不存在的时候它会自动创建，如果已经存在的话则会覆盖原文件的内容。
        g 全局替换
        y 字符转换

22.echo -e #-e 启用转义字符

23.unzip
    -l 显示压缩文件包含的文件
    -t 检查压缩文件是否正确
    -v 显示执行信息
    -n 解压缩时不覆盖原文件
    -d 指定解压后文件路径

24.od 把字符转为ASC码

25.linux在终端打开网页
    sudo aptitude install w3m
    w3m www.baidu.com

26.终端打开图片
    display image.file
    
27.wget
    -b 后台运行
    -c 断点续传
    
28.命令行翻译
    sudo aptitude install translate-shell
    trans 'Inchworm'

29.加环境变量
    1.临时
        export PATH=/usr/local/nginx/sbin/:$PATH
    2.永久
        echo 'PATH=$PATH:~/biosoft/samtools/bin' >> ~/.bashrc ，然后再source ~/.bashrc即可
            #echo 'PATH=$PATH:/home/huhu/last-1179/src' >> ~/.bashrc
            #echo 'PATH=$PATH:/home/huhu/last-1179/scripts' >> ~/.bashrc
30.mount
    fdisk -l #查看移动硬盘路径名称
    sudo mount /dev/sdc1 ./mobeldisk #挂载点可以使用相对路径
    df -h 查看挂载
    mount -t ntfs -o iocharset=cp936 /dev/sdc1 /mydata/data

31.服务器上传下载数据
    1)上传
        sudo apt install lrzsz
        rz  #打开文件上传窗口
        选择文件，即可上传
    2)下载
        sz  #打开文件下载窗口
        选择文件，即可下载
    
32.计算 # $[]
    1)整数
        echo 3 + 3 = $[3 + 3]
    2)浮点
        variable=$(echo "options; expression" | bc)
        num=$(echo "scale=2; 10 / 3" | bc)
        echo num

33.find
    find /home -name huhu
    



for i in `ls *.txt`
do  
    new=echo ${i:0:5}
    mv $i $new
done

34.用sed、awk、grep同时匹配多个条件(与模式、或模式)
同时匹配ABC 和 123:
sed -n '/ABC/{/123/p}'        
awk '/ABC/&&/123/{ print $0 }'  
grep -E '(ABC.*123|123.*ABC)'    
匹配ABC 或 123:
sed -n '/\(ABC\|123\)/p'
awk '/ABC/||/123/{ print $0 }'
grep -E '(ABC|123)' 或 egrep 'ABC|123'

35  %.* 删除变量最后一个.及后的内容；# %%.* 删除变量第一个.及后的内容
	echo ${apsimfile%.*}

36 fq转fa （conda）
     seqkit fq2fa nanopore.fastq.gz

37 linux编译
     1 ./configure # 生成Makefile
     2 make # 编译
     3 make install # 安装，可执行文件位于./bin
     4 chmod 777 exe

38 并行
conda create -n ParaFly_home
conda install -c bioconda ParaFly 

ls *.fq | while read fq; do echo "gzip ${fq}";done > gzip_fq.sh

# 4个线程
nohup ParaFly -c gzip_fq.sh -CPU 4 -failed_cmds gzip_fq.sh.failed &

# 当有任务失败，只需再次重复以上命令，会自行跳过已经完成的命令，继续完成失败的任务
nohup ParaFly -c gzip_fq.sh -CPU 4 -failed_cmds gzip_fq.sh.failed &

38 基本运算符
#! /bin/bash

echo "2+2=`expr 2 + 2`  (expr 2 + 2)";

#条件表达式要放在方括号之间，且每个字符之间都要有空格
a=10;
b=20;
echo "a + b = `expr $a +  $b`";
echo "a * b = `expr $a \*  $b`";

#关系运算符,只支持数字(-eq:等于;-ne:不等于;-gt:大于;-lt:小于;-ge:大于等于;-le:小于等于)
if [ $a -eq $b]
then 
	echo "$a -eq $b : a等于b"
else
	echo "$a -eq $b : a不等于b"
fi

#布尔运算符(!:非;-o(||):or;-a:and(&&))
if [ $a -lt 100 -a $b -gt 15]
then
	echo "$a小于100，并且$b大于15，返回true"
else
	
	echo "$a小于100，并且$b大于15，返回false"
fi

#字符运算符（=,!=,-z(长度是否为0);-n(长度是否不为0);$(是否为空)）
a="abc"
b="def"
if [-z $a]
then
	echo "${a}的长度为0"
else
	echo "${a}的长度不为0"
fi

if [ $a ]
then 
	echo "${a}的长度不为空"
else
	echo "${a}的长度为空"
fi

#文件测试运算符
##-r:是否可读;-w:是否可写;-x:是否可执行;-e:是否存在;-s:是否为空;-d:是否是目录;-f:是否是普通文件
if [ -e "/mnt/d/shell/基本运算符.sh" ]
then
	echo "文件存在"
else
	echo "文件不存在"
fi

# 39 多行注释
:<<EOF
echo 1
echo 2
echo 3
EOF
echo "有三行代码被注释了。"

# 40 数组, 使用小括号创建, 元素之间为空格
e=(a b c d) 
echo "变量e为一个数组,第一个元素是${e[0]},它的长度有${#e[0]},所有元素（@）有${e[@]},或（*）${e[*]},共有${#e[*]}个元素。"

# 41 变量
#变量名只能用英文字母，数字和下划线
name="HUHU" #等号前后不能有空i格
echo "我的名字叫${name}"

for ball in basketball football pingpang;do
	echo "I am good at ${ball}Script" #{}指定变量边界
done

#只读变量
like="banana"
readonly like
echo "我喜欢${like}"
like="apple"
echo "like只读（readonly var）,不能更改"

#删除变量
age=28
echo "我${age}了"
unset age
echo ${age}
echo "age删除了，不能使用了！(不能删除只读变量)"

# 42 字符串
##单引号：单引号中变量无效，任何字符都会原样输出
##拼接字符串，使用双引号
greeting="你好！${name}"
echo ${greeting}

#字符串长度
echo "我的名字叫${name},我的名字有${#name}个字符"

#提取字符串
echo "我的名字叫${name},我的名字有${#name}个字符,中间两个字符是${name:1:2}"

#查找字符串,哪个字母在前，计算哪个
string="abcdefg"
echo `expr index ${string} ec`

# printf 
printf "信息统计\n";
printf "%-10s %-8s %-4s\n" 姓名 性别 体重kg; #-:左对齐;s:字符;d:整数;f：小数;c:s一个字符;.2:保留小数位数;10,8,4:占位数
printf "%-10s %-8s %-4.2f\n" 郭靖 男 66.1234; #至指定一个格式，所有参数都按此格式输出;没有参数:%s用NULL代替，%d用0代替
printf "%-10s %-8s %-4.2f\n" 黄蓉 女 50;
printf "%-10s %-8s %-4.2f\n" 杨过 男 59.3;

# 43 conda
#1,下载并安装conda：下载并安装conda：
    wget -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh 
	bash 安装
    #查看是否成功安装
    source ~/.bashrc   #未出现任何提示，说明安装成功，进行下一步调用conda命令
    conda --help

#2,配置conda镜像
    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free
    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge
    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda
    conda config --set show_channel_urls yes

    #添加conda-forge channel
    conda config --add channels conda-forge
    conda config --set channel_priority strict

    source ~/.condarc #通过source ~/.condarc查看现有环境配置镜像 (dedit编辑)

   conda config --show-sources

#进入base
conda activate base
# 创建一个小环境名为blast_home
conda create -n blast_home
    查看创建的所有环境
    #conda info -e
    #查看小环境
    conda info -e blast_home   
    #进入小环境
    source activate blast_home
    #查看小环境已安装的软件
    conda list  
 	# 查看指定环境下用conda安装的软件
    conda list -n base  
    #安装相应版本的软件
    conda install PACKAGENAME==VERSION # conda uninstall / conda remove XXX
    conda install -c https://conda.anaconda.org/xxxxx keras
    conda install -c conda-forge r-stars
    # 更新包
    conda update 
    #查找相应的软件包
    conda search PACKAGENAME
    #退出小环境或base
    conda deactivate
    #移除小环境
    conda env remove --name blast_pre_home --all
    # 显示已有的通道
    conda config --get channels
    # 环境备份
    conda create -n python35copy --clone python35，把python35备份为python35copy
    #克隆环境
    conda create --name sv_home --clone cv_home
    # Conda环境导出和导入
        ## 假设我们有一个环境叫 ehbio，可以导出为一个yml文件
    conda env export --file ehbio_env.yml --name ehbio
    conda env create -f ehbio_env.yml
    # 使用conda-pack直接从已经安装好的地方拷贝一份 (同一操作系统)
    conda install -c conda-forge conda-pack
    conda pack -n my_env_name -o my_env_name.tar.gz
    拷贝打包好的环境my_env_name.tar.gz到目标机器，并解压到任何目录，一般推荐放到envs目录下 (anaconda_root/envs)。(注意：anaconda_root改为自己的conda安装路径。)
    source deactivate

# windows 
https://blog.csdn.net/jizhidexiaoming/article/details/122874488?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-2-122874488-blog-125784895.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-2-122874488-blog-125784895.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=5

# 44 blast
#下载
conda install blast

# blast安装perl模块
conda install perl-digest-md5

#建立本地库
makeblastdb -in 建库文件 -input_type 库文件类型（asn1_txt,fasta） -dbtype nucl/prot  -parse_seqids -out 库输出文件

# 查看信息
blastdbcmd -db 库文件 -dbtype nucl/prot -info
# 所有数据
blastdbcmd -db 库文件 -dbtype nucl/prot -entry all | head
# 具体关键字，如GI号
blastdbcmd -db 库文件 -dbtype nucl/prot -entry 3 | head

#比对程序
 n-n blastn   n搜索n
 p-p p        p搜索p
 n-p x        n翻译成p再搜索p
 p-n tblastn  p搜索n翻译成的p
 n-n tblastx  n翻译成p再搜索n翻译成p

blastx -query /media/huhu/学习/生信/棉花基因库/test.txt -db /home/huhu/blast/gh_pro -out test_blastx.txt -num_threads 10 

# 45 shell脚本在windows下编辑完后需要运行 sed -i 's/\r//' one-more.sh，不然会报错

# 46 cat /etc/os-release #查看系统版本

# 47 debian11 阿里源
deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib
deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib
deb http://mirrors.aliyun.com/debian-security/ bullseye-security main
deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main
deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib
deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib
deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib

# 48 服务器parallel线程问题
export OMP_NUM_THREADS=1
export OPENBLAS_NUM_THREADS=1

# 49 VScode设置
{
    "remote.SSH.defaultForwardedPorts": [
    






    
    ],
    "remote.SSH.useLocalServer": true,
    "remote.SSH.showLoginTerminal": true,
    "remote.SSH.remotePlatform": {
        "zzuaga06": "linux",
        "zzuaga05": "linux"
    },
    "git.ignoreLegacyWarning": true,
    "update.mode": "none"
}

// 将键绑定放在此文件中以覆盖默认值
// begin of R language shortcuts
[
    {
    "key": "ctrl+shift+m",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus && editorLangId == 'r'",
    "args": {
        "snippet": " %>% "
    }},
    {
        "key": "ctrl+shift+i",
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus && editorLangId == 'r'",
        "args": {
            "snippet": " %in% "
    }},
    {
        "key": "alt+-",
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus && editorLangId == 'r'",
        "args": {
            "snippet": " <- "
    }},
    {
        "key": "ctrl+shift+;",
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus && editorLangId == 'r'",
        "args": {
            "snippet": " := "
    }},


]

# ctrl + , ：打开设置
# 像R一样运行shell脚本：文件->首选项->键盘快捷方式->搜索 “运行所选本本” ->绑定快捷键 “ctrl+enter”
# 换行: 设置->常用设置->word wrap-> on
# R语言：关闭代码警告提示：ctrl + , -> r.lsp.diagnostics -> 取消勾选 -> 重启文件夹
# R语言：r.plot -> Dev Args -> width: 1200
# R语言：要变量提示的话，”Always Use Activate Terminal“设置为F，即不选

# 49 singularity （conda install singularity）
	singularity pull library://godlovedc/demo/lolcow # 从网络下载，储存为 SIF 文件
	singularity run lolcow_latest.sif # 运行时直接使用 SIF 直接运行
	容器构建：build 可以生成两种不同格式的容器，如下： 只读的 singularity sif 格式文件（默认）； 交互式开发沙箱，具有可写的根目录；
		以library://开头的 URI，用于从 Container Library 构建；sudo singularity build lolcow.simg library://sylabs-jms/testing/lolcow
		以docker://开头的 URI，用于从 Docker Hub 构建；sudo singularity build lolcow.sif docker://godlovedc/lolcow
		URI 以shub://开头，从 Singularity Hub 构建；sudo singularity build --sandbox lolcow/ library://sylabs-jms/testing/lolcow | sudo singularity shell --writable lolcow/ # 生成的目录可以像 SIF 文件中的容器一样运行。
		本地计算机上现有容器的路径；sudo singularity build production.sif development/ # 如果在本地保存了一个容器，可以将其用作构建新容器的目标。例如，有一个沙箱容器 development/，可以使用如下命令转换为 SIF 容器。
		要从沙箱构建的目录的路径；
		singularity 定义文件的路径；singularity 也可以采用定义文件作为构建容器目标，这种方法与 Dockfile 形式类似。 定义文件示例如下，在后面定义文件中会详细介绍定义文件编写规则。
	 交互式运行:
		singularity shell lolcow_latest.sif # 使用 shell 模式可以进入容器内运行 个人目录 /home;系统目录 /tmp，/sys，/proc，/dev，/usr;当前的工作目录
		singularity exec <SIF> <COMMAND> # 使用 exec 命令可以运行自定义命令而无需进入容器
		singularity exec lolcow_latest.sif /bin/bash my_bash_script.sh # 将命令写入脚本中，然后通过 exec 命令运行

# 50 ssh免密登录：知乎：SSH配置—Linux下实现免密码登录（funnyZhang）










